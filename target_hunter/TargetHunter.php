<!--
/*
 *  ITEC 370: Spring 2018
 *	Final Code: Game Engine Container
 *  Andrew McGuiness, Andrew Albanese, Ryan Kelley, Michael Hall
 *
*/
-->
<!DOCTYPE HTML>
<html>
<head>
    <title>Target Hunter</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="engine.css">
    
    
</head>
<body>

<!-- Container to hold the game canvas. -->
<div id="container">
    <canvas id="canvas" oncontextmenu="event.preventDefault();" width="640" height="480">
        HTML5 canvas appears to be unsupported in the current browser.<br/> Please try updating or use a different
        browser.
    </canvas>
    <div id="status">
        <div id='status-progress' style='display: none;' oncontextmenu="event.preventDefault();">
            <div id='status-progress-inner'></div>
        </div>
        <div id='status-indeterminate' style='display: none;' oncontextmenu="event.preventDefault();">
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
            <div></div>
        </div>
        <div id="status-notice" class="godot" style='display: none;'></div>
    </div>
</div>
<div id="output-panel" class="godot">
    <div id="output-header">
        Output:
        <button id='output-clear' class='godot' type='button' autocomplete='off'>Clear</button>
    </div>
    <div id="output-container">
        <div id="output-scroll"></div>
    </div>
</div>

<!-- Import libraries. -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

<!-- The following is code generated by the game engine, DO NOT MODIFY -->
<script type="text/javascript" src="TargetHunter.js"></script>
<script type="text/javascript">
    //<![CDATA[

    var engine = new Engine;

    (function () {

        const BASENAME = 'TargetHunter';
        const DEBUG_ENABLED = false;
        const INDETERMINATE_STATUS_STEP_MS = 100;

        var container = document.getElementById('container');
        var canvas = document.getElementById('canvas');
        var statusProgress = document.getElementById('status-progress');
        var statusProgressInner = document.getElementById('status-progress-inner');
        var statusIndeterminate = document.getElementById('status-indeterminate');
        var statusNotice = document.getElementById('status-notice');

        var initializing = true;
        var statusMode = 'hidden';
        var indeterminiateStatusAnimationId = 0;

        setStatusMode('indeterminate');
        engine.setCanvas(canvas);

        function setStatusMode(mode) {

            if (statusMode === mode || !initializing)
                return;
            [statusProgress, statusIndeterminate, statusNotice].forEach(elem => {
                elem.style.display = 'none';
            });
            if (indeterminiateStatusAnimationId !== 0) {
                cancelAnimationFrame(indeterminiateStatusAnimationId);
                indeterminiateStatusAnimationId = 0;
            }
            switch (mode) {
                case 'progress':
                    statusProgress.style.display = 'block';
                    break;
                case 'indeterminate':
                    statusIndeterminate.style.display = 'block';
                    indeterminiateStatusAnimationId = requestAnimationFrame(animateStatusIndeterminate);
                    break;
                case 'notice':
                    statusNotice.style.display = 'block';
                    break;
                case 'hidden':
                    break;
                default:
                    throw new Error("Invalid status mode");
            }
            statusMode = mode;
        }

        function animateStatusIndeterminate(ms) {
            var i = Math.floor(ms / INDETERMINATE_STATUS_STEP_MS % 8);
            if (statusIndeterminate.children[i].style.borderTopColor == '') {
                Array.prototype.slice.call(statusIndeterminate.children).forEach(child => {
                    child.style.borderTopColor = '';
                });
                statusIndeterminate.children[i].style.borderTopColor = '#dfdfdf';
            }
            requestAnimationFrame(animateStatusIndeterminate);
        }

        function setStatusNotice(text) {

            while (statusNotice.lastChild) {
                statusNotice.removeChild(statusNotice.lastChild);
            }
            var lines = text.split('\n');
            lines.forEach((line, index) => {
                statusNotice.appendChild(document.createTextNode(line));
                statusNotice.appendChild(document.createElement('br'));
            });
        };

        engine.setProgressFunc((current, total) => {

            if (total > 0) {
                statusProgressInner.style.width = current / total * 100 + '%';
                setStatusMode('progress');
                if (current === total) {
                    // wait for progress bar animation
                    setTimeout(() => {
                        setStatusMode('indeterminate');
                    }, 500);
                }
            } else {
                setStatusMode('indeterminate');
            }
        });

        if (DEBUG_ENABLED) {
            var outputRoot = document.getElementById("output-panel");
            var outputScroll = document.getElementById("output-scroll");
            var OUTPUT_MSG_COUNT_MAX = 400;

            document.getElementById('output-clear').addEventListener('click', () => {
                while (outputScroll.firstChild) {
                    outputScroll.firstChild.remove();
                }
            });

            outputRoot.style.display = 'block';

            function print(text) {
                while (outputScroll.childElementCount >= OUTPUT_MSG_COUNT_MAX) {
                    outputScroll.firstChild.remove();
                }
                var msg = document.createElement("div");
                if (String.prototype.trim.call(text).startsWith("**ERROR**")) {
                    msg.style.color = "#d44";
                } else if (String.prototype.trim.call(text).startsWith("**WARNING**")) {
                    msg.style.color = "#ccc000";
                } else if (String.prototype.trim.call(text).startsWith("**SCRIPT ERROR**")) {
                    msg.style.color = "#c6d";
                }
                msg.textContent = text;
                var scrollToBottom = outputScroll.scrollHeight - (outputScroll.clientHeight + outputScroll.scrollTop) < 10;
                outputScroll.appendChild(msg);
                if (scrollToBottom) {
                    outputScroll.scrollTop = outputScroll.scrollHeight;
                }
            };

            function printError(text) {
                if (!String.prototype.trim.call(text).startsWith('**ERROR**: ')) {
                    text = '**ERROR**: ' + text;
                }
                print(text);
            }

            engine.setStdoutFunc(text => {
                print(text);
                console.log(text);
            });

            engine.setStderrFunc(text => {
                printError(text);
                console.warn(text);
            });
        }

        engine.startGame(BASENAME + '.pck').then(() => {
            setStatusMode('hidden');
            initializing = false;
        }, err => {
            if (DEBUG_ENABLED) {
                printError(err.message);
                console.warn(err);
            }
            setStatusNotice(err.message);
            setStatusMode('notice');
            initializing = false;
        });
    })();
    //]]>
</script>
<!-- End Generated Code -->

<!-- All the following code is custom and created by the team. -->
<script>
	var server = "http://localhost:8080/";
    var ready = false;
    var currentID = -1;

    <?php
    include_once "../db_connect/getThemes.php";

    echo "var age   = '" . $_POST["ageSelect"] . "';\n";
    echo "var input = '" . $_POST["inputSelect"] . "';\n";
    echo "var skill = '" . $_POST["skillSelect"] . "';\n";
    echo "var theme = '" . getTheme() . "';\n";
    ?>

    function getID() {
        return currentID;
    }

    function generateID(t) {
        id = -1;

        console.log(age + " " + input + " " + skill + " " + t);
        jQuery.ajax({
            type: "POST",
            url: '../db_connect/databaseController.php',
            dataType: 'json',
            data: {whatToDo: "generateID", ageSelect: age, inputSelect: input, skillSelect: skill, usedTheme: t},

            success: function (result) {
                currentID = result["ID"];
                console.log("Finished Fetching ID");
            }
        });
    }

    function uploadTargetHit(i, n, t, m, tars) {
        console.log("Uploading a target hit");
        jQuery.ajax({
            type: "POST",
            url: '../db_connect/databaseController.php',
            dataType: 'json',
            data: {whatToDo: "uploadHit", ID: i, number: n, time: t, misses: m, totalTargets: tars},

            success: function (obj, textstatus) {
                if (!('error' in obj)) {
                    console.log(obj.result);
                }
                else {
                    console.log(obj.error);
                }
            }
        });
    }

    function uploadScore(i, s) {
        console.log("Uploading Player Score");
        jQuery.ajax({
            type: "POST",
            url: '../db_connect/databaseController.php',
            dataType: 'json',
            data: {whatToDo: "uploadScore", ID: i, score: s},

            success: function (obj, textstatus) {
                if (!('error' in obj)) {
                    console.log(obj.result);
                }
                else {
                    console.log(obj.error);
                }
            }
        });
    }

    function exit() {
        window.location.href = "../index.html";
    }
</script>
</body>
</html>

